#pragma once
#include "SDL3.h"
#include "Assimp.h"
#include "Collision.h"
#include "Renderer.h"
#include "Texture.h"
#include "VertexArray.h"
#include <rapidjson/document.h>
#include <GL/glew.h>
#include "MeshFilePath.h"
#include "Typedefs.h"


//マテリアル情報の構造体
struct MaterialInfo
{
	Vector4 Color;
	Vector3 Diffuse;
	Vector3 Ambient;
	Vector3 Specular;
	float   Shininess;
};

class Mesh
{
public:
	Mesh();
	~Mesh();
	// Load
	bool Load(const string& fileName, class Renderer* renderer,int index);
	// Unload mesh
	void Unload();
	// MeshのVertexArrayを配列で取得
	vector<class VertexArray*> GetVertexArrays() 
	{
		return mVertexArrays; 
	}
	// テクスチャを配列で取得
	class Texture* GetTexture(size_t index);
	// シェーダー名を取得
	const string& GetShaderName() const { return mShaderName; }
	// 球の半径を取得
	vector<float> GetRadiusArray() const { return mRadiusArray; }
	// モデルのボックス型の座標を取得
	const vector<AABB> GetBoxs() const { return mBoxs; }
	//マテリアル情報取得
	const vector<MaterialInfo> GetMaterialInfo() const { return mMaterialInfo; }
	//Meshの数を取得
	int CheckMeshIndex(const string& fileName, class Renderer* renderer);
private:
	//JSONファイルの読み込み処理
	bool LoadFromJSON(const string& fileName, class Renderer* renderer, int index);
	// FBXファイルからJSONに変換処理
	bool LoadFromFBX(const string& fileName, class Renderer* renderer, int index);
	// AABBの当たり判定を配列で取得
	vector<AABB> mBoxs;
	// Meshのテクスチャを取得
	vector<class Texture*>		mTextures;
	// MeshのVertexArrayの配列
	vector<class VertexArray*> mVertexArrays;
	// シェーダー名
	string						mShaderName;
	// 球の半径
	vector<float>				mRadiusArray;
	// マテリアル情報
	vector<MaterialInfo>		mMaterialInfo;
};